# https://atcoder.jp/contests/abc169/tasks/abc169_d
# N <= 10^12
# z = P^e(Pは素数、eは整数)
# Nはzで割り切れる
# 以前の操作で選んだどの整数とも異なる
# N/zを繰り返す。
# 最大で何回操作できるか？
#
# 2から素数で試していくのは無理。1000000007みたいなでかい素数はO(N)の時間がかかりTLEになるはず。
# 約数を列挙するのは早くできるからNの約数を求めて、それからzを作る求めるほうが現実的か？
# `最大で何回`というのも謎。約数の小さい方から割っていったほうが回数は増えるはず、というくらいか。

# わからん、解説を読む
# https://drken1215.hatenablog.com/entry/2020/06/01/010800
#
# 素因数分解問題だが読みきれなかった...

require "prime"

N = gets.to_i

# p^2,p^3,p^4...の個数を足していく
# e = 1 => p^1
# e = 2 => p^1 * p^1で重複するのでダメ
# e = 3 => p^1 * p^2
# e = 4 => p^1 * p^2で重複するのでダメ
# e = 5 => p^1 * p^2で重複するのでダメ
# e = 6 => p^1 * p^2 * p^3
# e = 7 => p^1 * p^2 * p^3で重複するのでダメ
# e = 8 => p^1 * p^2 * p^3で重複するのでダメ
# e = 9 => p^1 * p^2 * p^3で重複するのでダメ
# e = 10 => p^1 * p^2 * p^3 * p^4
# ....
ans = 0
N.prime_division.each do |_, e|
  i = 1
  while i <= e
    e -= i
    i += 1
    ans += 1
  end
end

puts(ans)
